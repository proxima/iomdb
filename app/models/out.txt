::::::::::::::
alignment_level.rb
::::::::::::::
class AlignmentLevel < ActiveRecord::Base  

  validates_presence_of :name, :level
  validates_uniqueness_of :name, :level

  validates_numericality_of :level, :only_integer => true

end
::::::::::::::
armor_class_level.rb
::::::::::::::
class ArmorClassLevel < ActiveRecord::Base

  validates_presence_of :name, :level
  validates_uniqueness_of :name, :level

  validates_numericality_of :level, :only_integer => true

end
::::::::::::::
damage_level.rb
::::::::::::::
class DamageLevel < ActiveRecord::Base

  validates_presence_of :name, :level
  validates_uniqueness_of :name, :level

  validates_numericality_of :level, :only_integer => true

end
::::::::::::::
damage_type.rb
::::::::::::::
class DamageType < ActiveRecord::Base

  validates_presence_of :name
  validates_uniqueness_of :name
  
end
::::::::::::::
equipment_monster.rb
::::::::::::::
class EquipmentMonster < ActiveRecord::Base

  validates_presence_of :name
  validates_uniqueness_of :name

  has_many :equipment_pieces, :dependent => :destroy

end
::::::::::::::
equipment_piece.rb
::::::::::::::
class EquipmentPiece < ActiveRecord::Base

  belongs_to :equipment_monster

  has_many :stat_affects
  has_many :resistance_affects
  has_many :skill_affects
  has_many :spell_affects
  has_many :slot_affects
  
  validates_presence_of :name
  validates_uniqueness_of :name

  validates_numericality_of :klass, :weight, :tp_value

end
::::::::::::::
guild.rb
::::::::::::::
class Guild < ActiveRecord::Base

  acts_as_versioned

  cattr_reader :per_page
  @@per_page = 30

  has_one :guild_type

  has_many :skill_train_specs, :order => 'level ASC'
  has_many :spell_train_specs, :order => 'level ASC'

  validates_presence_of :name, :location, :guild_type_id, :levels
  validates_uniqueness_of :name

  validates_numericality_of :levels, :only_integer => true

end
::::::::::::::
guild_type.rb
::::::::::::::
class GuildType < ActiveRecord::Base

  validates_presence_of :name, :level
  validates_uniqueness_of :name, :level

  validates_numericality_of :level, :only_integer => true

end
::::::::::::::
hunger_level.rb
::::::::::::::
class HungerLevel < ActiveRecord::Base

  validates_presence_of :name, :level
  validates_uniqueness_of :name, :level

  validates_numericality_of :level, :only_integer => true

end
::::::::::::::
race.rb
::::::::::::::
class Race < ActiveRecord::Base

  validates_presence_of :name
  validates_uniqueness_of :name

  validates_presence_of :description

  validates_numericality_of :strength, :dexterity, :constitution, :intelligence, :wisdom, :stamina, :charisma, :hpregen, :spregen, :epregen, :average_height, :average_weight, :only_integer => true
  validates_numericality_of :skill_max, :spell_max, :greater_than_or_equal => 5, :less_than_or_equal => 120
  validates_numericality_of :skill_rate, :spell_rate, :experience_rate, :greater_than => 0, :less_than_or_equal => 200
 
end
::::::::::::::
resistance_affect.rb
::::::::::::::
class ResistanceAffect < ActiveRecord::Base

  belongs_to :equipment_piece
  has_one :damage_type

  validates_presence_of :equipment_piece_id, :damage_type_id, :value
  validates_numericality_of :equipment_piece_id, :damage_type_id, :value

end
::::::::::::::
skill.rb
::::::::::::::
class Skill < ActiveRecord::Base

  cattr_reader :per_page
  @@per_page = 30

  validates_presence_of :name
  validates_uniqueness_of :name

  validates_numericality_of :base_cost, :only_integer => true

end
::::::::::::::
skill_affect.rb
::::::::::::::
class SkillAffect < ActiveRecord::Base

  belongs_to :equipment_piece
  has_one :skill

  validates_presence_of :equipment_piece_id, :skill_id, :value
  validates_numericality_of :equipment_piece_id, :skill_id, :value

end
::::::::::::::
skill_train_spec.rb
::::::::::::::
class SkillTrainSpec < ActiveRecord::Base

  def initialize(params = nil)
    super(params)
    self.max = 100 unless self.max
  end

  belongs_to :guild
  has_one :skill
  
  validates_numericality_of :guild_id, :skill_id, :level, :only_integer => true
  validates_numericality_of :max, :only_integer => true, :maximum => 100, :minimum => 5

end
::::::::::::::
slot.rb
::::::::::::::
class Slot < ActiveRecord::Base

  validates_presence_of :name
  validates_uniqueness_of :name

end
::::::::::::::
slot_affect.rb
::::::::::::::
class SlotAffect < ActiveRecord::Base

  belongs_to :equipment_piece
  has_one :slot

  validates_presence_of :equipment_piece_id, :slot_id
  validates_numericality_of :equipment_piece_id, :slot_id

end
::::::::::::::
spell.rb
::::::::::::::
class Spell < ActiveRecord::Base

  cattr_reader :per_page
  @@per_page = 30

  validates_presence_of :name
  validates_uniqueness_of :name

  validates_numericality_of :base_cost, :only_integer => true

end
::::::::::::::
spell_affect.rb
::::::::::::::
class SpellAffect < ActiveRecord::Base

  belongs_to :equipment_piece
  has_one :spell

  validates_presence_of :equipment_piece_id, :spell_id, :value
  validates_numericality_of :equipment_piece_id, :spell_id, :value

end
::::::::::::::
spell_train_spec.rb
::::::::::::::
class SpellTrainSpec < ActiveRecord::Base

  def initialize(params = nil)
    super(params)
    self.max = 100 unless self.max
  end

  belongs_to :guild
  has_one :spell

  validates_numericality_of :guild_id, :spell_id, :level, :only_integer => true
  validates_numericality_of :max, :only_integer => true, :maximum => 100, :minimum => 5

end
::::::::::::::
stat.rb
::::::::::::::
class Stat < ActiveRecord::Base

  validates_presence_of :name
  validates_uniqueness_of :name

  validates_presence_of :abbreviation
  validates_uniqueness_of :abbreviation

end
::::::::::::::
stat_affect.rb
::::::::::::::
class StatAffect < ActiveRecord::Base

  belongs_to :equipment_piece
  has_one :stat

  validates_presence_of :equipment_piece_id, :stat_id, :value
  validates_numericality_of :equipment_piece_id, :stat_id, :value

end
::::::::::::::
stat_level.rb
::::::::::::::
class StatLevel < ActiveRecord::Base

  validates_presence_of :name, :level
  validates_uniqueness_of :name, :level

  validates_numericality_of :level, :only_integer => true

end
